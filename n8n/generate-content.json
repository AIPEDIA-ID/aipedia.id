{
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -140,
        -120
      ],
      "id": "f2fb2bcb-6c9b-4a3a-92c8-02b902e622c0",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"urls\": [\n\"https://techcrunch.com/category/artificial-intelligence/\"\n  ]\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        60,
        -120
      ],
      "id": "f5bf7217-2242-44ad-92d4-b9574550409a",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "const urls = $input.first().json.urls;\nconst randomUrl = urls[Math.floor(Math.random() * urls.length)];\n\nreturn [\n  {\n    json: {\n      selected_url: randomUrl\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        260,
        -120
      ],
      "id": "f4e62f55-231e-4f64-901a-1a3dafa059ad",
      "name": "Pick random url from urls"
    },
    {
      "parameters": {
        "url": "={{ $json.selected_url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        480,
        -120
      ],
      "id": "c2c111a9-5fb7-40e4-bd10-08e9cc4966fa",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "function makeAbsoluteUrl(href, base) {\n  try {\n    return new URL(href, base).toString();\n  } catch (e) {\n    return null;\n  }\n}\n\n\nconst html = $input.first().json.data;\nconst baseUrl = $input.first().json.selected_url;\n\n// Ambil isi <main>...</main> (pertama yang ketemu)\nconst mainMatch = html.match(/<main[^>]*>([\\s\\S]*?)<\\/main>/i);\nif (!mainMatch) {\n  return [{ json: { error: \"No <main> tag found\", source_homepage: baseUrl } }];\n}\n\nconst mainHtml = mainMatch[1];\n\n// Extract <a href=\"...\"> dari dalam <main>\nconst hrefMatches = [...mainHtml.matchAll(/<a[^>]*href=\"([^\"]+)\"/gi)];\n\nfunction makeAbsoluteUrl(href, base) {\n  try {\n    return new URL(href, base).toString();\n  } catch (e) {\n    return null;\n  }\n}\n\nconst links = [];\nfor (const match of hrefMatches) {\n  const href = match[1];\n  if (!href || href.startsWith('#')) continue;\n\n  const fullUrl = href.startsWith('http')\n    ? href\n    : makeAbsoluteUrl(href, baseUrl);\n\n  if (fullUrl) links.push(fullUrl);\n  if (links.length >= 5) break;\n}\n\nreturn { article_urls: links};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        700,
        -120
      ],
      "id": "06e9dde8-3c81-46f4-a9f2-efec24851b3a",
      "name": "Code"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Pick the best link that indicates it's article links or media link not social media link\n```\n{{ $json.article_urls }}\n```\nand only return only one link, the best link, only one link without any extra text",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        920,
        -120
      ],
      "id": "b2c86db7-5fe2-446e-83df-33f64a810662",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        940,
        100
      ],
      "id": "2512d9d3-8f7c-4364-b989-76122a4b1ed1",
      "name": "Google Gemini Chat Model1",
      "credentials": {
        "googlePalmApi": {
          "id": "vG8lfNOce5tN2oef",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "url": "={{ $json.text }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1280,
        -120
      ],
      "id": "2ababb1f-a71b-4b8a-a41c-5d81cbe2184e",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "text": "={{ $json.data }}",
        "attributes": {
          "attributes": [
            {
              "name": "content",
              "description": "Content"
            }
          ]
        },
        "options": {
          "systemPromptTemplate": "You are an expert extraction algorithm.\nOnly extract relevant information from the text, That related to main content\nIf you do not know the value of an attribute asked to extract, you may omit the attribute's value.\n\nFocus on main content"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1.1,
      "position": [
        1500,
        -120
      ],
      "id": "9980f138-dc33-4ee5-b43c-22ac562604e1",
      "name": "Information Extractor"
    },
    {
      "parameters": {
        "modelName": "models/gemini-1.5-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1520,
        100
      ],
      "id": "c960c563-165b-40db-9af5-8b18ed9ebe9b",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "vG8lfNOce5tN2oef",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "chatgpt-4o-latest",
          "mode": "list",
          "cachedResultName": "CHATGPT-4O-LATEST"
        },
        "messages": {
          "values": [
            {
              "content": "=# Prompt: Tulis Artikel Berita Long-Form Bergaya Humanis dalam Bahasa Indonesia\n\nRepurpose dari konten ini:\n\n\"\"\"\n{{ $json.output.content }}\n\"\"\"\n\nKamu adalah penulis konten yang ditugaskan untuk menulis artikel jurnalistik long-form dalam **Bahasa Indonesia**, menggunakan sudut pandang orang ketiga, dengan struktur profesional dan gaya naratif yang halus.\n\n## Bahasa Output:\n- Gunakan **Bahasa Indonesia** yang humanis dan natural\n- Jangan gunakan em dash (—)\n\n## Tujuan Penulisan:\nTulis artikel **berita bergaya long-form** (1.000–1.500 kata) yang memadukan:\n- Selalu ingat bahwa, minimal 1500 kata\n- **Struktur jurnalistik profesional** (inverted pyramid)\n- **Cerita kontekstual**\n- **Nada humanis**, tapi tetap objektif\n\n## Panduan Struktur:\n- **Lead**: Ambil elemen penting (siapa, apa, kapan, di mana, kenapa, bagaimana), tetapi urutannya bisa fleksibel (tidak wajib dimulai dengan tanggal).\n- **Body**: Kembangkan cerita dengan data, kutipan, alur logis, dan narasi yang mengalir.\n- **Penutup**: Akhiri dengan analisis, refleksi, atau implikasi jangka panjang (misalnya: strategi, ekonomi, budaya).\n\n## Sudut Pandang:\n- Gunakan **sudut pandang orang ketiga**. Jangan gunakan “saya”, “kami”, atau sapaan langsung seperti “Anda”.\n- Rujuk tokoh atau entitas dengan nama atau jabatan (contoh: “kata Roslansky”, “perusahaan tersebut menilai”, “data dari LinkedIn menunjukkan”).\n\n## Gaya & Nada:\n- Gunakan bahasa Indonesia yang alami dan mengalir, hindari kalimat yang terdengar seperti terjemahan literal dari bahasa Inggris.\n- Setiap paragraf harus terasa seperti obrolan yang membumi, bukan kuliah akademis atau jurnal riset.\n- Jangan sekadar menyalin poin dari sumber, tapi pahami dan ungkapkan ulang dengan sudut pandang pembaca Indonesia.\n- Gunakan Bahasa Indonesia yang efisien, dan alami, dengan gaya formal ringan dan juga sentuhan naratif.\n- Boleh menyisipkan istilah berbahasa Inggris jika lebih natural atau umum digunakan, seperti: *startup*, *open-source*, *large language model*, *smart* daripada “cerdas”, \"AI\" dsb.\n- Gunakan subjudul hanya jika membantu alur — hindari pembagian berlebihan.\n- Narasi ringan diperbolehkan bila relevan (misalnya kutipan langsung, konteks pribadi singkat).\n- Sertakan istilah teknis atau ekonomi hanya jika relevan, dan **jelaskan dalam konteks** (bukan definisi terpisah).\n- Paragraf pendek (2–4 kalimat), mengalir, dan mudah dibaca.\n\n## Adaptasi Topik:\nPrompt ini dapat digunakan untuk berbagai tema, seperti:\n- AI dan Transformasi Dunia Kerja\n- Tren Keuangan Global dan Crypto\n- Perubahan Kebijakan & Makroekonomi\n\n## Contoh Topik Artikel:\nDampak AI terhadap dunia kerja, berdasarkan wawancara CEO LinkedIn Ryan Roslansky dan data dari platform LinkedIn.\n\n## Referensi:\n(Digunakan sebagai latar belakang, bukan untuk disalin langsung.)\n\n## Evaluate\n- DON'T USER emdash (—)\n\n**Return your output in this exact JSON format:**\n`yyyy-mm-dd` =  use date today!\n\n```json\n   {\n     \"filename\": \"judul-dalam-slug.md\",\n     \"content\": \"---\\ntitle: \\\"...\\\"\\nsubtitle: \\\"...\\\"\\ndate: \\\"yyyy-mm-dd\\\"\\nauthor: \\\"Aji Pratama\\\"\\nauthorSlug: \\\"aji-pratama\\\"\\nimage: \\\"...\\\"\\ntype: \\\"article\\\"\\nreadTime: \\\"...\\\"\\nfeatured: true\\ntags: [\\\"...\\\", \\\"...\\\"]\\n---\\n\\n### Judul Artikel\\n\\nIsi artikel...\"\n   }\n```\n\n"
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        1860,
        -120
      ],
      "id": "4cc46c93-190c-4e32-a1cc-b61f36df238a",
      "name": "Generate Articles based on context",
      "credentials": {
        "openAiApi": {
          "id": "ziYBel7a9mrTkTqB",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const raw = $input.first().json.message.content;\n\n// Match the code block inside ```json ... ```\nconst jsonMatch = raw.match(/```json\\s+([\\s\\S]*?)```/);\nif (!jsonMatch) {\n  throw new Error(\"No JSON code block found in OpenAI response.\");\n}\n\nlet parsed;\ntry {\n  parsed = JSON.parse(jsonMatch[1]);\n} catch (err) {\n  throw new Error(\"Failed to parse JSON from OpenAI: \" + err.message);\n}\n\n// Clean newline escape characters if needed\nparsed.content = parsed.content.replace(/\\\\n/g, '\\n');\n\n// Return final usable JSON\nreturn [{\n  json: {\n    filename: parsed.filename,\n    content: parsed.content\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2220,
        -120
      ],
      "id": "f56f7c56-76f7-439d-9d0e-fde689de9782",
      "name": "Format: filename and markdown content"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -140,
        -420
      ],
      "id": "1436114a-974b-428e-8f01-3cdb821d1512",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "AIPEDIA-ID",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "aipedia.id",
          "mode": "list",
          "cachedResultName": "aipedia.id",
          "cachedResultUrl": "https://github.com/AIPEDIA-ID/aipedia.id"
        },
        "filePath": "=src/content/posts/{{ $('Format: filename and markdown content').item.json.filename }}",
        "fileContent": "={{ $('Format: filename and markdown content').item.json.content }}",
        "commitMessage": "=Update Content: {{ $('Format: filename and markdown content').item.json.filename }}",
        "additionalParameters": {
          "branch": {
            "branch": "=auto/content-{{ $('Format: filename and markdown content').item.json.filename }}"
          }
        }
      },
      "type": "n8n-nodes-base.github",
      "typeVersion": 1.1,
      "position": [
        2920,
        -120
      ],
      "id": "4e1e9588-6c49-4459-9ce1-2d75e7b33eed",
      "name": "Create a file",
      "webhookId": "dfa6bafc-417f-47cf-a5aa-a731990413d0",
      "credentials": {
        "githubApi": {
          "id": "VNg9lArXbDCydX2g",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "url": "https://api.github.com/repos/AIPEDIA-ID/aipedia.id/git/ref/heads/main",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2440,
        -120
      ],
      "id": "f2355dc6-d0e9-4339-ab3d-95cb538fb6f6",
      "name": "HTTP Request2",
      "credentials": {
        "githubApi": {
          "id": "VNg9lArXbDCydX2g",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.github.com/repos/AIPEDIA-ID/aipedia.id/git/refs",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "githubApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"ref\": \"refs/heads/auto/content-{{ $('Format: filename and markdown content').item.json.filename }}\",\n  \"sha\": \"{{ $json.object.sha }}\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2680,
        -120
      ],
      "id": "d46b4b46-f404-496b-bea2-5a2a357b020f",
      "name": "HTTP Request3",
      "credentials": {
        "githubApi": {
          "id": "VNg9lArXbDCydX2g",
          "name": "GitHub account"
        }
      }
    }
  ],
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Pick random url from urls",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pick random url from urls": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Information Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Information Extractor": {
      "main": [
        [
          {
            "node": "Generate Articles based on context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Information Extractor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate Articles based on context": {
      "main": [
        [
          {
            "node": "Format: filename and markdown content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format: filename and markdown content": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "Create a file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b8e37fcf2e1925b6b0d6ef68f823ec5c6978878f7560f944b73c95abf9b7cf7c"
  }
}