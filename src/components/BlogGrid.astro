---
import { getCollection } from 'astro:content';

// Get all posts from content collection
const allPosts = await getCollection('posts');

// Sort posts by date (newest first)
const sortedPosts = allPosts.sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());
---

<section class="bg-white py-12 px-6 lg:px-8">
  <div class="max-w-6xl mx-auto">
    <!-- Section Header -->
    <div class="text-center mb-10">
      <h2 class="text-3xl md:text-4xl font-bold text-text mb-4">Latest Posts</h2>
      <p class="text-gray-600 text-lg max-w-2xl mx-auto leading-relaxed">
        Insights, tips, dan analisis terbaru tentang AI untuk solopreneur dan bisnis kecil.
      </p>
    </div>
    
    <!-- Search Bar -->
    <div class="max-w-md mx-auto mb-10">
      <div class="relative">
        <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
          <svg class="h-4 w-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
        <input 
          type="text" 
          id="searchInput"
          placeholder="Search posts..." 
          class="block w-full pl-10 pr-4 py-3 border border-gray-100 bg-gray-50 rounded-xl focus:outline-none focus:ring-1 focus:ring-gray-200 focus:border-gray-200 focus:bg-white transition-all text-sm text-gray-600 placeholder-gray-400"
        />
      </div>
    </div>
    
    <!-- Blog Grid -->
    <div id="blogGrid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-10">
      {sortedPosts.slice(0, 9).map((post) => (
        <article class="blog-post bg-white rounded-2xl border-2 border-gray-200 hover:border-gray-300 transition-all duration-200 overflow-hidden group">
          <div class="aspect-w-16 aspect-h-9">
            <img 
              src={post.data.image} 
              alt={post.data.title}
              class="w-full h-48 object-cover"
            />
          </div>
          <div class="p-5">
            <div class="flex items-center text-sm text-gray-500 mb-3">
              <span>{post.data.date}</span>
              <span class="mx-2">•</span>
              <a href={`/author/${post.data.authorSlug}`} class="hover:text-primary transition-colors">
                {post.data.author}
              </a>
            </div>
            <h3 class="post-title text-lg font-bold text-text mb-2 leading-tight">
              <a href={`/post/${post.slug}`} class="group-hover:text-primary transition-colors">
                {post.data.title}
              </a>
            </h3>
            <p class="post-subtitle text-gray-600 leading-relaxed mb-4 text-sm">
              {post.data.subtitle}
            </p>
            <div class="flex items-center justify-between">
              <span class="inline-block bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded-full font-medium">
                {post.data.type}
              </span>
              {/* TODO: implement fav button <button class="text-gray-400 hover:text-red-500 transition-colors">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
                </svg>
              </button> */}
            </div>
          </div>
        </article>
      ))}
    </div>
    
    <!-- Pagination -->
    <div id="pagination" class="flex justify-center items-center space-x-2">
      <button id="prevBtn" class="px-4 py-2 text-gray-500 hover:text-primary transition-colors disabled:opacity-50 font-medium" disabled>
        Previous
      </button>
      <div id="pageNumbers" class="flex space-x-1">
        <!-- Page numbers will be generated by JavaScript -->
      </div>
      <button id="nextBtn" class="px-4 py-2 text-gray-500 hover:text-primary transition-colors font-medium">
        Next
      </button>
    </div>
  </div>
</section>

<script define:vars={{ allPosts: sortedPosts.map(post => ({
  slug: post.slug,
  title: post.data.title,
  subtitle: post.data.subtitle,
  date: post.data.date,
  author: post.data.author,
  authorSlug: post.data.authorSlug,
  image: post.data.image,
  type: post.data.type
})) }}>
  let currentPage = 1;
  const postsPerPage = 9;
  let filteredPosts = [...allPosts];
  
  // Search functionality
  const searchInput = document.getElementById('searchInput');
  const blogGrid = document.getElementById('blogGrid');
  
  function filterPosts(searchTerm) {
    filteredPosts = allPosts.filter(post => 
      post.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      post.subtitle.toLowerCase().includes(searchTerm.toLowerCase())
    );
    currentPage = 1;
    renderPosts();
    renderPagination();
  }
  
  function renderPosts() {
    const startIndex = (currentPage - 1) * postsPerPage;
    const endIndex = startIndex + postsPerPage;
    const postsToShow = filteredPosts.slice(startIndex, endIndex);
    
    blogGrid.innerHTML = postsToShow.map(post => `
      <article class="blog-post bg-white rounded-2xl border-2 border-gray-200 hover:border-gray-300 transition-all duration-200 overflow-hidden group">
        <div class="aspect-w-16 aspect-h-9">
          <img 
            src="${post.image}" 
            alt="${post.title}"
            class="w-full h-48 object-cover"
          />
        </div>
        <div class="p-5">
          <div class="flex items-center text-sm text-gray-500 mb-3">
            <span>${post.date}</span>
            <span class="mx-2">•</span>
            <a href="/author/${post.authorSlug}" class="hover:text-primary transition-colors">
              ${post.author}
            </a>
          </div>
          <h3 class="post-title text-lg font-bold text-text mb-2 leading-tight">
            <a href="/post/${post.slug}" class="group-hover:text-primary transition-colors">
              ${post.title}
            </a>
          </h3>
          <p class="post-subtitle text-gray-600 leading-relaxed mb-4 text-sm">
            ${post.subtitle}
          </p>
          <div class="flex items-center justify-between">
            <span class="inline-block bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded-full font-medium">
              ${post.type}
            </span>
          </div>
        </div>
      </article>
    `).join('');
  }
  
  function renderPagination() {
    const totalPages = Math.ceil(filteredPosts.length / postsPerPage);
    const pageNumbers = document.getElementById('pageNumbers');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    
    // Update previous/next buttons
    prevBtn.disabled = currentPage === 1;
    nextBtn.disabled = currentPage === totalPages || totalPages === 0;
    
    // Generate page numbers
    let paginationHTML = '';
    for (let i = 1; i <= totalPages; i++) {
      if (i === currentPage) {
        paginationHTML += `<button class="px-3 py-1 bg-primary text-white rounded-lg font-medium text-sm">${i}</button>`;
      } else {
        paginationHTML += `<button class="px-3 py-1 text-gray-500 hover:text-primary transition-colors font-medium text-sm" onclick="goToPage(${i})">${i}</button>`;
      }
    }
    pageNumbers.innerHTML = paginationHTML;
  }
  
  function goToPage(page) {
    currentPage = page;
    renderPosts();
    renderPagination();
  }
  
  // Event listeners
  searchInput.addEventListener('input', (e) => {
    filterPosts(e.target.value);
  });
  
  document.getElementById('prevBtn').addEventListener('click', () => {
    if (currentPage > 1) {
      goToPage(currentPage - 1);
    }
  });
  
  document.getElementById('nextBtn').addEventListener('click', () => {
    const totalPages = Math.ceil(filteredPosts.length / postsPerPage);
    if (currentPage < totalPages) {
      goToPage(currentPage + 1);
    }
  });
  
  // Make goToPage global for inline onclick handlers
  window.goToPage = goToPage;
  
  // Initial render
  renderPosts();
  renderPagination();
</script>